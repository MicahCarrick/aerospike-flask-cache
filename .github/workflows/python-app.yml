# This workflow will install Python dependencies, run tests and lint with flake8

name: Python application
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
permissions:
  contents: read
jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        #python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        python_version: ["3.8"]
        aerospike_version: ["7.0.0"]
    env:
      AEROSPIKE_FLASK_CACHE_TEST_DB_HOST: "172.17.0.1"
      AEROSPIKE_FLASK_CACHE_TEST_DB_PORT: "3000"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install .
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings.
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=80 --statistics
      - name: Download Aerospike ${{ matrix.aerospike_version }}
        run: |
          wget -q -O aerospike.tgz https://enterprise.aerospike.com/enterprise/download/server/${{ matrix.aerospike_version }}/artifact/ubuntu22_amd64
      - name: Cache Aerospike ${{ matrix.aerospike_version }}
        uses: actions/cache@v3
        with:
          path: aerospike.tgz
          key: aerospike-${{ matrix.aerospike_version }}
      - name: Install Aerospike ${{ matrix.aerospike_version }}
        run: |
          tar -xvf aerospike.tgz
          cd aerospike-server-enterprise*
          sudo ./asinstall
          sudo cp ${{ github.workspace }}/tests/opt/aerospike.conf /etc/aerospike/aerospike.conf
          sudo systemctl start aerospike
          sudo systemctl status aerospike
      - name: Dump Aerospike log
        run: sudo journalctl -u aerospike -o cat -n 50
      - name: Display Aerospike version
        run: asd --version
      - name: Test with pytest
        run: |
          echo -e '\x00' | nc -w 2 172.17.0.1 3000 || true
          echo -e '\x00' | nc -w 2 172.17.0.2 3000 || true
          echo -e '\x00' | nc -w 2 127.0.0.1 3000 || true
          echo -e '\x00' | nc -w 2 host.docker.internal 3000 || true
          pytest --log-cli-level=DEBUG
